---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote!\n{\n    #[rust_sitter::grammar(\"test\")] mod grammar\n    {\n        #[rust_sitter::language] pub struct Language { e: Expression, } pub\n        enum Expression { Number(#[rust_sitter::leaf(re(r\"\\d+\"))] i32), }\n    }\n})? .to_token_stream().to_string())"
---
mod grammar {
    pub struct Language {
        e: Expression,
    }
    impl ::rust_sitter::Extract<Language> for Language {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a>(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            last_pt: ::rust_sitter::tree_sitter::Point,
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Self {
            let node = node.expect("no node found");
            ::rust_sitter::__private::extract_struct_or_variant(
                node,
                move |cursor, last_idx, last_pt| Language {
                    e: {
                        ::rust_sitter::__private::extract_field::<Expression, _>(
                            cursor, source, last_idx, last_pt, "e", None,
                        )
                    },
                },
            )
        }
    }
    pub enum Expression {
        Number(i32),
    }
    impl ::rust_sitter::Extract<Expression> for Expression {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a>(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            _last_idx: usize,
            _last_pt: ::rust_sitter::tree_sitter::Point,
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Self {
            let node = node.expect("No node found");
            let mut cursor = node.walk();
            assert!(
                cursor.goto_first_child(),
                "Could not find a child corresponding to any enum branch"
            );
            loop {
                let node = cursor.node();
                match node.kind() {
                    "Expression_Number" => {
                        return ::rust_sitter::__private::extract_struct_or_variant(
                            node,
                            move |cursor, last_idx, last_pt| {
                                Expression::Number({
                                    ::rust_sitter::__private::extract_field::<i32, _>(
                                        cursor, source, last_idx, last_pt, "0", None,
                                    )
                                })
                            },
                        )
                    }
                    _ => {
                        if !cursor.goto_next_sibling() {
                            panic!("Could not find a child corresponding to any enum branch")
                        }
                    }
                }
            }
        }
    }
    unsafe extern "C" {
        fn tree_sitter_test() -> ::rust_sitter::tree_sitter::Language;
    }
    pub fn language() -> ::rust_sitter::tree_sitter::Language {
        unsafe { tree_sitter_test() }
    }
    #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
    #[doc = "[`Language`]"]
    #[doc = r" instance containing the parsed structured data."]
    pub fn parse(
        input: &str,
    ) -> core::result::Result<Language, Vec<::rust_sitter::errors::ParseError>> {
        ::rust_sitter::__private::parse::<Language>(input, language)
    }
}

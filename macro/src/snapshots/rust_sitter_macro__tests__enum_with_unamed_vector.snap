---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote!\n{\n    mod grammar\n    {\n        #[derive(rust_sitter::Rule)] pub struct Number\n        { #[leaf(re(r\"\\d+\"))] value: u32 } #[derive(rust_sitter::Rule)]\n        #[language] pub enum Expr { Numbers(#[repeat1] Vec<Number>) }\n    }\n}).to_token_stream().to_string())"
---
mod grammar {
    impl ::rust_sitter::Extract<Number> for Number {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a, 'tree>(
            ctx: &mut ::rust_sitter::extract::ExtractContext<'_>,
            node: Option<::rust_sitter::tree_sitter::Node<'tree>>,
            source: &[u8],
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Result<Self, ::rust_sitter::extract::ExtractError<'tree>> {
            let node = node.ok_or_else(|| {
                ::rust_sitter::error::ExtractError::missing_node(ctx, stringify!(Number))
            })?;
            ::rust_sitter::__private::extract_struct_or_variant(node, move |state| {
                Ok(Number {
                    value: {
                        ::rust_sitter::__private::extract_field::<u32, _>(
                            state, source, "value", None,
                        )
                    }?,
                })
            })
        }
    }
    impl ::rust_sitter::rule::Rule<Number> for Number {
        fn produce_ast() -> String {
            String::new()
        }
        fn rule_name() -> &'static str {
            "Number"
        }
    }
    impl ::rust_sitter::rule::Language for Expr {
        fn produce_grammar() -> String {
            String::new()
        }
        fn language() -> ::rust_sitter::tree_sitter::Language {
            unsafe extern "C" {
                fn tree_sitter_Expr() -> ::rust_sitter::tree_sitter::Language;
            }
            unsafe { tree_sitter_Expr() }
        }
        #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
        #[doc = "[`Expr`]"]
        #[doc = r" instance containing the parsed structured data."]
        fn parse(input: &str) -> ::rust_sitter::ParseResult<Self> {
            ::rust_sitter::__private::parse(input, Self::language)
        }
    }
    impl ::rust_sitter::Extract<Expr> for Expr {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a, 'tree>(
            _ctx: &mut ::rust_sitter::extract::ExtractContext<'_>,
            node: Option<::rust_sitter::tree_sitter::Node<'tree>>,
            source: &[u8],
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Result<Self, ::rust_sitter::extract::ExtractError<'tree>> {
            let node = node.ok_or_else(|| {
                ::rust_sitter::error::ExtractError::missing_node(_ctx, stringify!(Expr))
            })?;
            let mut cursor = node.walk();
            assert!(
                cursor.goto_first_child(),
                "Could not find a child corresponding to any enum branch"
            );
            loop {
                let node = cursor.node();
                match node.kind() {
                    "Expr_Numbers" => {
                        return ::rust_sitter::__private::extract_struct_or_variant(
                            node,
                            move |state| {
                                Ok(Expr::Numbers({
                                    ::rust_sitter::__private::extract_field::<Vec<Number>, _>(
                                        state, source, "0", None,
                                    )
                                }?))
                            },
                        )
                    }
                    k => {
                        if !cursor.goto_next_sibling() {
                            return Err(::rust_sitter::error::ExtractError::missing_enum(_ctx, k));
                        }
                    }
                }
            }
        }
    }
    impl ::rust_sitter::rule::Rule<Expr> for Expr {
        fn produce_ast() -> String {
            String::new()
        }
        fn rule_name() -> &'static str {
            "Expr"
        }
    }
}

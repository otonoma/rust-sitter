---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote!\n{\n    mod grammar\n    {\n        #[derive(rust_sitter::Rule)] pub struct Number\n        { #[leaf(re(r\"\\d+\"))] value: u32 } #[derive(rust_sitter::Rule)]\n        #[language] pub enum Expr { Numbers(#[repeat1] Vec<Number>) }\n    }\n}).to_token_stream().to_string())"
---
mod grammar {
    impl ::rust_sitter::Extract for Number {
        type Output = Self;
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract<'tree>(
            ctx: &mut ::rust_sitter::extract::ExtractContext,
            node: Option<::rust_sitter::tree_sitter::Node<'tree>>,
            source: &[u8],
            _l: Self::LeafFn,
        ) -> Result<Self, ::rust_sitter::extract::ExtractError<'tree>> {
            let node = node.ok_or_else(|| ::rust_sitter::error::ExtractError::missing_node(ctx))?;
            ::rust_sitter::__private::extract_struct_or_variant(
                stringify!(Number),
                node,
                move |state| {
                    Ok(Number {
                        value: ::rust_sitter::__private::extract_field::<u32, _>(
                            ::rust_sitter::extract::BaseExtractor::default(),
                            (),
                            state,
                            ::rust_sitter::extract::ExtractFieldContext::new(
                                0u32,
                                false,
                                |state| match state {
                                    0u32 => ::rust_sitter::extract::ExtractFieldState::Complete,
                                    _ => ::rust_sitter::extract::ExtractFieldState::Overflow,
                                },
                            ),
                            source,
                            "value",
                        )?,
                    })
                },
            )
        }
    }
    impl ::rust_sitter::rule::Rule for Number {
        const RULE_NAME: &'static str = "Number";
        fn produce_ast() -> String {
            String::new()
        }
    }
    impl ::rust_sitter::rule::Language for Expr {
        fn produce_grammar() -> String {
            String::new()
        }
        fn language() -> ::rust_sitter::tree_sitter::Language {
            unsafe extern "C" {
                fn tree_sitter_Expr() -> ::rust_sitter::tree_sitter::Language;
            }
            unsafe { tree_sitter_Expr() }
        }
        #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
        #[doc = "[`Expr`]"]
        #[doc = r" instance containing the parsed structured data."]
        fn parse(input: &str) -> ::rust_sitter::ParseResult<Self> {
            ::rust_sitter::__private::parse(input, Self::language)
        }
    }
    impl ::rust_sitter::Extract for Expr {
        type Output = Self;
        type LeafFn = ();
        #[allow(non_snake_case)]
        fn extract<'tree>(
            ctx: &mut ::rust_sitter::extract::ExtractContext,
            node: Option<::rust_sitter::tree_sitter::Node<'tree>>,
            source: &[u8],
            _l: Self::LeafFn,
        ) -> Result<Self, ::rust_sitter::extract::ExtractError<'tree>> {
            let node = node.ok_or_else(|| ::rust_sitter::error::ExtractError::missing_node(ctx))?;
            let mut cursor = node.walk();
            if !cursor.goto_first_child() {
                return Err(::rust_sitter::error::ExtractError::missing_node(ctx));
            }
            loop {
                let node = cursor.node();
                match node.kind() {
                    "Expr_Numbers" => {
                        return ::rust_sitter::__private::extract_struct_or_variant(
                            stringify!(Expr::Numbers),
                            node,
                            move |state| {
                                Ok(Expr::Numbers(::rust_sitter::__private::extract_field::<
                                    Vec<Number>,
                                    _,
                                >(
                                    ::rust_sitter::extract::BaseExtractor::default(),
                                    (),
                                    state,
                                    ::rust_sitter::extract::ExtractFieldContext::new(
                                        2u32,
                                        false,
                                        |state| match state {
                                            0u32 => ::rust_sitter::extract::ExtractFieldState::Str(
                                                "Number", true, false,
                                            ),
                                            1u32 => {
                                                ::rust_sitter::extract::ExtractFieldState::Repeat1
                                            }
                                            2u32 => {
                                                ::rust_sitter::extract::ExtractFieldState::Complete
                                            }
                                            _ => {
                                                ::rust_sitter::extract::ExtractFieldState::Overflow
                                            }
                                        },
                                    ),
                                    source,
                                    "0",
                                )?))
                            },
                        )
                    }
                    k => {
                        if !cursor.goto_next_sibling() {
                            return Err(::rust_sitter::error::ExtractError::missing_enum(ctx));
                        }
                    }
                }
            }
        }
    }
    impl ::rust_sitter::rule::Rule for Expr {
        const RULE_NAME: &'static str = "Expr";
        fn produce_ast() -> String {
            String::new()
        }
    }
}

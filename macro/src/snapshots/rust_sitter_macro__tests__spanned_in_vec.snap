---
source: macro/src/lib.rs
expression: "rustfmt_code(&expand_grammar(parse_quote!\n{\n    mod grammar\n    {\n        use rust_sitter::{Rule, Spanned}; #[derive(Rule)] #[language] pub\n        struct NumberList { numbers: Vec<Spanned<Number>>, } #[derive(Rule)]\n        pub struct Number { #[leaf(re(r\"\\d+\"))] v: i32 } #[derive(Rule)]\n        #[extra] struct Whitespace\n        { #[leaf(pattern(r\"\\s\"))] _whitespace: (), }\n    }\n}).to_token_stream().to_string())"
---
mod grammar {
    use rust_sitter::{Rule, Spanned};
    impl NumberList {
        pub fn language() -> ::rust_sitter::tree_sitter::Language {
            unsafe extern "C" {
                fn tree_sitter_NumberList() -> ::rust_sitter::tree_sitter::Language;
            }
            unsafe { tree_sitter_NumberList() }
        }
        #[doc = r" Parse an input string according to the grammar. Returns either any parsing errors that happened, or a"]
        #[doc = "[`NumberList`]"]
        #[doc = r" instance containing the parsed structured data."]
        pub fn parse(
            input: &str,
        ) -> core::result::Result<Self, Vec<::rust_sitter::errors::ParseError>> {
            ::rust_sitter::__private::parse(input, Self::language)
        }
    }
    impl ::rust_sitter::Extract<NumberList> for NumberList {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a>(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            last_pt: ::rust_sitter::tree_sitter::Point,
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Self {
            let node = node.expect("no node found");
            ::rust_sitter::__private::extract_struct_or_variant(
                node,
                move |cursor, last_idx, last_pt| NumberList {
                    numbers: {
                        ::rust_sitter::__private::extract_field::<Vec<Spanned<Number>>, _>(
                            cursor, source, last_idx, last_pt, "numbers", None,
                        )
                    },
                },
            )
        }
    }
    impl ::rust_sitter::rule::Rule<NumberList> for NumberList {
        fn produce_ast() -> String {
            String::new()
        }
        fn rule_name() -> &'static str {
            "NumberList"
        }
    }
    impl ::rust_sitter::Extract<Number> for Number {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a>(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            last_pt: ::rust_sitter::tree_sitter::Point,
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Self {
            let node = node.expect("no node found");
            ::rust_sitter::__private::extract_struct_or_variant(
                node,
                move |cursor, last_idx, last_pt| Number {
                    v: {
                        ::rust_sitter::__private::extract_field::<i32, _>(
                            cursor, source, last_idx, last_pt, "v", None,
                        )
                    },
                },
            )
        }
    }
    impl ::rust_sitter::rule::Rule<Number> for Number {
        fn produce_ast() -> String {
            String::new()
        }
        fn rule_name() -> &'static str {
            "Number"
        }
    }
    impl ::rust_sitter::Extract<Whitespace> for Whitespace {
        type LeafFn<'a> = ();
        #[allow(non_snake_case)]
        fn extract<'a>(
            node: Option<::rust_sitter::tree_sitter::Node>,
            source: &[u8],
            last_idx: usize,
            last_pt: ::rust_sitter::tree_sitter::Point,
            _leaf_fn: Option<Self::LeafFn<'a>>,
        ) -> Self {
            let node = node.expect("no node found");
            ::rust_sitter::__private::extract_struct_or_variant(
                node,
                move |cursor, last_idx, last_pt| Whitespace {
                    _whitespace: {
                        ::rust_sitter::__private::extract_field::<(), _>(
                            cursor,
                            source,
                            last_idx,
                            last_pt,
                            "_whitespace",
                            None,
                        )
                    },
                },
            )
        }
    }
    impl ::rust_sitter::rule::Rule<Whitespace> for Whitespace {
        fn produce_ast() -> String {
            String::new()
        }
        fn rule_name() -> &'static str {
            "Whitespace"
        }
    }
}
